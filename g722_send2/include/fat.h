/**--------------文件信息--------------------------------------------------------------------------------
**文   件   名: fat.h
********************************************************************************************************/
#define	PP	printf("xxxxx\n");

#ifndef MAX_OPEN_FILES
#define MAX_OPEN_FILES              4           /* 可以同时打开的文件数目 */
#endif

#ifndef DISK_CACHE_SIZE
#define DISK_CACHE_SIZE             512         /* 文件系统Cache大小(字节),应当是最大的扇区所占字节数 */
#endif

#ifndef MAX_PATHFILE_LENGTH
#define MAX_PATHFILE_LENGTH         512         /* 字符串的长度 */
#endif

typedef Uint16 HANDLE;
#define Not_Open_FILE               0xffff


/* 底层驱动命令 */
#define DISK_INIT                   0       /* 初始化，必须实现             */
#define DISK_CLOSE                  1       /* 关闭，必须实现               */
#define DISK_READ_SECTOR            2       /* 读扇区，必须实现             */
#define DISK_WRITE_SECTOR           3       /* 写扇区，必须实现             */
#define DISK_DRIVER_VER             4       /* 查看驱动程序版本号，必须实现 */
#define DISK_CHECK_CMD              5       /* 查看命令是否实现，必须实现   */
#define DISK_LOW_FORMAT             6       /* 低级格式化，可选命令         */
#define DISK_FREE_SECTOR            7       /* 释放扇区，可选命令           */
#define DISK_GET_SECTOR_NUMBER      8       /* 获得设备总扇区数，可选命令   */
#define DISK_GET_BYTES_PER_SECTOR   9       /* 获得每扇区字节数，可选命令   */
#define DISK_CHECK_CHANGE           10      /* 查看介质是否改变，可选命令   */
#define DISK_GET_SECTORS_PER_BLOCK  11      /* 获取每块扇区数，可选命令     */
#define DISK_READ_BLOCK             12      /* 读数据块，可选命令           */
#define DISK_WRITE_BLOCK            13      /* 写数据块，可选命令           */
#define DISK_READ_RAW               14      /* 读扇区数据，不需要字节转换FANG   */
#define DISK_WRITE_RAW              15      /* 写扇区数据，不需要字节转换FANG   */

/* 底层驱动返回值 */
#define DISK_RETURN_OK              0x00
#define DISK_READ_OK                0x01
#define DISK_READ_NOT_OK            0x80
#define DISK_WRITE_OK               0x02
#define DISK_WRITE_NOT_OK           0x82
#define DISK_INIT_OK                0x03
#define DISK_INIT_NOT_OK            0x83
#define DISK_TRUE                   0x04
#define DISK_FALSE                  0x84
#define BAD_DISK_COMMAND            0xffff

/* 函数返回值 */
#define RETURN_OK                   0x00    /* 操作成功         */
#define NOT_FIND_DISK               0x01    /* 逻辑盘不存在     */
#define DISK_FULL                   0x02    /* 逻辑盘满         */
#define SECTOR_NOT_IN_CACHE         0x03    /* 扇区没有被cache  */
#define NOT_EMPTY_CACHE             0x04    /* 没有空闲cache    */
#define SECTOR_READ_ERR             0x05    /* 读扇区错误       */
#define CLUSTER_NOT_IN_DISK         0x06    /* 逻辑盘中没有此簇  */
#define NOT_FIND_FDT                0x07    /* 没有发现文件(目录)*/
#define NOT_FAT_DISK                0x08    /* 非FAT文件系统    */
#define FDT_OVER                    0x09    /* FDT索引超出范围  */
#define FDT_EXISTS                  0x0a    /* 文件(目录)已经存在*/
#define ROOT_FDT_FULL               0x0b    /* 根目录满         */
#define DIR_EMPTY                   0x0C    /* 目录空           */
#define DIR_NOT_EMPTY               0x0d    /* 目录不空         */
#define PATH_NOT_FIND               0x0e    /* 路径未找到       */
#define FAT_ERR                     0x0f    /* FAT表错误       */
#define FILE_NAME_ERR               0x10    /* 文件(目录)名错误 */
#define FILE_EOF                    0x11    /* 文件结束        */
#define FILE_LOCK                   0x12    /* 文件被锁定       */
#define NOT_FIND_FILE               0x13    /* 没有发现指定文件 */
#define NOT_FIND_DIR                0x14    /* 没有发现指定目录 */
#define GET_TIME_ERR                0x15    /* 获取时间错误 */
#define DISK_NO_FORMAT              0x16    /* 逻辑盘没有格式化 */
#define NOT_RUN                     0xfd    /* 命令未执行       */
#define BAD_COMMAND                 0xfe    /* 错误命令       */
#define PARAMETER_ERR               0xff    /* 非法参数        */

/* 未使用的逻辑盘  */
#define EMPTY_DRIVE                 0xff
#define UN_MOUNT_DRIVE              0xfe

/* FAT类型 */
#define FAT12                       0
#define FAT16                       1
#define FAT32                       2

/* FDT文件属性 */
#define ATTR_READ_ONLY              0x01
#define ATTR_HIDDEN                 0x02
#define ATTR_SYSTEM                 0x04
#define ATTR_VOLUME_ID              0x08
#define ATTR_DIRECTORY              0x10
#define ATTR_ARCHIVE                0x20

/* 簇类型 */
#define EMPTY_CLUS                  0
#define EMPTY_CLUS_1                1
#define BAD_CLUS                    0x0ffffff7L
#define EOF_CLUS_1                  0x0ffffff8L
#define EOF_CLUS_END                0x0fffffffL

/* FDT类型 */
#define EMPTY_FDT                   0
#define DEL_FDT                     ((char)(0xe5))
#define ESC_FDT                     0x05

#define	FDTGET						1
#define	FDTSET						2

/* Cache状态 */
#define CACHE_READ                  0x02
#define CACHE_WRITTEN               0x01
#define CACHE_DATA                  0x04

/* 文件指针状态 */
#define FILE_FLAGS_READ             1           /* 可读 */
#define FILE_FLAGS_WRITE            2           /* 可写 */

/* 文件指针调整方式 */
#define SEEK_SET    0               /* 从文件开始处移动文件指针 */
#define SEEK_CUR    1               /* 从文件当前位置移动文件指针 */
#define SEEK_END    2               /* 从文件尾移动文件指针 */

#ifndef	NULL
#define	NULL	((void *)0)
#endif


/* 给底层驱动读写命令的参数结构体 */
typedef struct _Disk_RW_Parameter
{
    Uint32      SectorIndex;    /* 操作的扇区 */
    void        *RsvdForLow;    /* 保留给底层驱动程序，由_Disk_Info中拷贝过来 */
    Uint8       *Buf;           /* 数据存储位置 */
}Disk_RW_Parameter;

/* 文件系统cache数据结构 */
typedef struct _Disk_Cache
{
    Uint8       Flag;           /* 状态 */
    Uint16      RW_ID;          /* 读写ID,用于释放Cache */
    Uint32      SecIndex;       /* 缓冲的扇区索引 */
    Uint8       buf[DISK_CACHE_SIZE];   /* 缓冲区 */
}Disk_cache;

/* 逻辑盘信息的数据结构 */
typedef struct _Disk_Info
{
    Uint8       FATType;        /* 类型：FAT12、FAT16和FAT32 */
    Uint8       SecPerClus;     /* 每簇扇区数 */
    Uint8       NumFATs;        /* FAT表数目 */

    Uint16      BytsPerSec;     /* 每扇区字节数 */
    Uint32      SecPerDisk;     /* 逻辑驱动器包含扇区数 */
    Uint32      RootDirTable;   /* 根目录开始扇区号（FAT32为开始簇号）*/
    Uint32      RootSecCnt;     /* 根目录占用扇区数 */
    Uint32      FATStartSec;    /* FAT表开始扇区号 */
    Uint32      FATSecCnt;      /* 每个FAT占用扇区数 */
    Uint32      DataStartSec;   /* 数据区开始扇区号 */
    Uint32      ClusPerData;    /* 数据区包含簇数 */
    Uint32      PathClusIndex;  /* 当前路径的FDT表开始簇号, 0为根目录 */

    Uint32      SecOffset;      /* 分区起始位置 */

    void        *RsvdForLow;    /* 保留给底层驱动程序 */
    
    Uint16      (* DiakCommand)(Uint8 Cammand, void *Parameter);
                                /* 对应的驱动程序 */
}Disk_Info;

/* 目录表数据结构 */
typedef struct _FDT
{
    Int8    Name[11];           /* 短文件名主文件名 */
    Uint8   Attr;               /* 文件属性 */
    Uint8   NTRes;              /* 保留给NT */
    Uint8   CrtTimeTenth;       /* 建立时间（fat16保留）*/
    Uint16  CrtTime;            /* 建立时间（fat16保留）*/
    Uint16  CrtDate;            /* 建立日期（fat16保留）*/
    Uint16  LstAccDate;         /* 最后访问日期（fat16保留）*/
    Uint16  FstClusHI;          /* 起始簇号高两个字节（fat16保留）*/
    Uint16  WrtTime;            /* 最后写时间 */
    Uint16  WrtDate;            /* 最后写日期 */
    Uint16  FstClusLO;          /* 起始簇(cluster)号低两个字节 */
    Uint32  FileSize;           /* 文件大小 */
} FDT;

/* 文件信息结构体 */
typedef struct _FILE
{
    Uint8       Flags;          /* 一些标志 */
    Int8        Name[11];       /* 文件名 */
    Uint32      DirClus;        /* 所在目录开始簇号 */
    Uint32      FileSize;       /* 文件大小 */
    Uint32      FstClus;        /* 起始簇号 */
    Uint32      Clus;           /* 当前簇号 */
    Uint32      Offset;         /* 文件指针偏移量 */
} MY_FILE;


/* 用户设置的时间格式 */
typedef struct _DATE_TIME
{
    Uint16  da_year;	        /* 公元年 */
    Uint8   da_mon;	            /* 月 */ 
    Uint8   da_day;	            /* 月中日期 */
    Uint8   da_dow;	            /* 星期中日期 */
   
    Uint8   ti_hour;	        /* 时 */
    Uint8   ti_min;  	        /* 分 */
    Uint8   ti_sec;	            /* 秒 */
    Uint8   ti_hund;	        /* 百分之一秒 */
}DATE_TIME;


/* 与FS接口的时间格式，与FDT项匹配 */
typedef  struct _SYS_TIME
{
/* 日期：位0～4：日，有效值1～31；位5～8：月，有效值1～12；*/
/*       位9～15：年，从1980年开始的年数，有效值0～127 */
    Uint16  date;

/* 时间：位0～4：2秒的数量；位5～10：分，有效值0～59；位11～15：时，有效值0～23 */
    Uint16  time;

/* 十分之一秒值，有效值0～199 */
    Uint8   msec;	
}SYS_TIME;


/*******************************************************************************************************/

Uint16 SDCammand(Uint8 Cammand, void *Parameter);

#ifndef IN_FILE

extern void FileInit(void);
/*********************************************************************************************************
** 函数名称: FileInit
** 功能描述: 初始化文件指针系统
**
** 输　入: 无
**
** 输　出: 无
**         
** 全局变量: 无
** 调用模块: 无
********************************************************************************************************/

extern Uint8 RemoveFile(Int8 *DirFileName);
/*********************************************************************************************************
** 函数名称: RemoveFile
** 功能描述: 删除文件
**
** 输　入: DirFileName:用户使用的文件名
**
** 输　出: RETURN_OK：成功
**        其它参考fat.h中关于返回值的说明
** 全局变量: 无
** 调用模块: strupr,_GetFileInfo,GetDrive,FindFDTInfo,FATDelClusChain,DelFDT
********************************************************************************************************/

extern HANDLE FileOpen(Int8 *DirFileName, Uint16 type);
/*********************************************************************************************************
** 函数名称: FileOpen
** 功能描述: 以指定方式打开文件
**
** 输　入: DirFileName:用户使用的文件名
**        Type:打开方式
** 输　出: 文件句柄，Not_Open_FILE为不能打开
**         
** 全局变量: 无
** 调用模块: _FileOpenR,_FileOpenW,_FileOpenRW
********************************************************************************************************/

extern Uint8 FileClose(HANDLE Handle);
/*********************************************************************************************************
** 函数名称: FileClose
** 功能描述: 关闭指定文件
**
** 输　入: Handle:文件句柄
**
** 输　出: RETURN_OK:成功
**        其它参考fat.h中关于返回值的说明 
** 全局变量: 无
** 调用模块: 无
********************************************************************************************************/

extern Uint32 FileRead(void *Buf, Uint32 Size, HANDLE Handle);
/*********************************************************************************************************
** 函数名称: FileRead
** 功能描述: 读取文件
**
** 输　入: Buf:保存读回的数据
**        Size:要读的字节数
**        Handle:文件句柄
** 输　出: 实际读到的字节数
**         
** 全局变量: 无
** 调用模块: 无
********************************************************************************************************/

extern Uint32 FileWrite(void *Buf, Uint32 Size, HANDLE Handle);
/*********************************************************************************************************
** 函数名称: FileWrite
** 功能描述: 写文件
**
** 输　入: Buf:要写的数据
**        Size:要写的字节数
**        Handle:文件句柄
** 输　出: 实际写的字节数
**         
** 全局变量: 无
** 调用模块: 无
**
** 作　者: 陈明计
** 日　期: 2003年6月5日
**-------------------------------------------------------------------------------------------------------
** 修改人:
** 日　期:
**------------------------------------------------------------------------------------------------------
********************************************************************************************************/

extern void FileCloseAll(void);
/*********************************************************************************************************
** 函数名称: FileCloseAll
** 功能描述: 关闭所有打开的文件
**
** 输　入: 无
**
** 输　出: 无
**         
** 全局变量: FileInfo
** 调用模块: AllCacheWriteBack
********************************************************************************************************/

extern Uint8 FileSeek(HANDLE Handle, Int32 offset, Uint8 Whence);
/*********************************************************************************************************
** 函数名称: FileSeek
** 功能描述: 移动文件读\写位置
**
** 输　入: Handle:文件句柄
**        offset:移动偏移量
**        Whence:移动模式SEEK_SET:从文件头计算SEEK_CUR:从当前位置计算SEEK_END:从文件尾计算
** 输　出: 无
**         
** 全局变量: 无
** 调用模块: 无
********************************************************************************************************/

#endif

#ifdef IN_DIR
#define GETDATATIME
#endif

#ifdef IN_FILE
#define GETDATATIME
#endif

#ifdef GETDATATIME
extern Uint8    GetDataTime(DATE_TIME *GetTime);
/*********************************************************************************************************
** 函数名称: GetDateTime
** 功能描述: 用户完成函数，获取当前的时间
**
** 输　入: Time  指向保存结果
**
** 输　出: 错误代码，RETURN_OK为正确
**         
** 全局变量: 无
** 调用模块: 无
**
********************************************************************************************************/
#endif

/*******************************************************************************************************/


#ifndef IN_DIR


extern Uint32 GetDirClusIndex(Int8 *Path);
/*********************************************************************************************************
** 函数名称: GetDirClusIndex
** 功能描述: 获取指定目录开始簇号
**
** 输　入: Path:路径名
**        
** 输　出: 开始簇号，EMPTY_CLUS：为根目录
**
** 全局变量: 无
** 调用模块: strupr,FindRootFDTInfo,FindFDTInfo
********************************************************************************************************/

extern Uint8 MakeDir(Int8 *Path);
/*********************************************************************************************************
** 函数名称: MakeDir
** 功能描述: 建立目录
**
** 输　入: Path:路径名
**
** 输　出: RETURN_OK：成功
**        其它参考fat.h中关于返回值的说明
** 全局变量: 无
** 调用模块: GetDirClusIndex,strupr,ClearClus,AddRootFDT,AddFDT
********************************************************************************************************/

extern Uint8 RemoveDir(Int8 *Path);
/*********************************************************************************************************
** 函数名称: RemoveDir
** 功能描述: 删除目录
**
** 输　入: Path:路径名
**
** 输　出: RETURN_OK：成功
**        其它参考fat.h中关于返回值的说明
** 全局变量: 无
** 调用模块: GetDirClusIndex,strupr,DelRootFDT,DelRootFDT
********************************************************************************************************/

extern Uint8 ChangeDir(Int8 *Path);
/*********************************************************************************************************
** 函数名称: ChangeDir
** 功能描述: 改变当前目录
**
** 输　入: Path:路径名
**
** 输　出: RETURN_OK：成功
**        其它参考fat.h中关于返回值的说明
** 全局变量: 无
** 调用模块: GetDirClusIndex
********************************************************************************************************/


#endif


/*******************************************************************************************************/

#ifndef IN_FDT

extern Uint8 ClearClus(Uint32 Index);
/*********************************************************************************************************
** 函数名称: ClearClus
** 功能描述: 将指定簇所有数据清零
**
** 输　入: Index：簇号
** 输　出: RETURN_OK:成功
**        其它参考fat.h中关于返回值的说明
** 全局变量: 无
** 调用模块: OpenSec,WriteSec,CloseSec
********************************************************************************************************/

extern Uint8 ChangeFDT(Uint32 ClusIndex, FDT *FDTData);
/*********************************************************************************************************
** 函数名称: ChangeFDT
** 功能描述: 改变指定目录指定文件（目录）的属性
**
** 输　入: ClusIndex：目录首簇号
**         FileName：文件（目录）名
** 输　出: RETURN_OK：成功
**        其它参考fat.h中关于返回值的说明
** 全局变量: 无
** 调用模块: GetFDTInfo,SetFDTInfo
********************************************************************************************************/

extern Uint8 FindFDTInfo(FDT *Rt, Uint32 ClusIndex, Int8 FileName[]);
/*********************************************************************************************************
** 函数名称: FindFDT
** 功能描述: 在指定目录查找指定文件（目录）
**
** 输　入: Rt：存储返回信息的指针
**        ClusIndex：目录首簇号
**        FileName：文件（目录）名
** 输　出: RETURN_OK：成功
**        其它参考fat.h中关于返回值的说明
** 全局变量: 无
** 调用模块: GetFDTInfo
********************************************************************************************************/

extern Uint8 AddFDT(Uint32 ClusIndex, FDT *FDTData);
/*********************************************************************************************************
** 函数名称: AddFDT
** 功能描述: 在指定目录查增加指定文件（目录）
**
** 输　入: ClusIndex：目录首簇号
**         FileName：文件（目录）名
** 输　出: RETURN_OK：成功
**        其它参考fat.h中关于返回值的说明
** 全局变量: 无
** 调用模块: FindFDT,GetFDTInfo,SetFDTInfo
********************************************************************************************************/

extern Uint8 DelFDT(Uint32 ClusIndex, Int8 FileName[]);
/*********************************************************************************************************
** 函数名称: DelFDT
** 功能描述: 在指定目录删除指定文件（目录）
**
** 输　入: ClusIndex：目录首簇号
**         FileName：文件（目录）名
** 输　出: RETURN_OK：成功
**        其它参考fat.h中关于返回值的说明
** 全局变量: 无
** 调用模块: GetFDTInfo,SetFDTInfo
********************************************************************************************************/

extern Uint8 DirIsEmpty(Uint32 ClusIndex);
/*********************************************************************************************************
** 函数名称: DirIsEmpty
** 功能描述: 
**
** 输　入: ClusIndex：目录首簇号
** 输　出: DIR_EMPTY：空
**        DIR_NOT_EMPTY：不空
**        其它参考fat.h中关于返回值的说明
** 全局变量: 无
** 调用模块: GetFDTInfo
********************************************************************************************************/

extern Uint8 FDTIsLie(Uint32 ClusIndex, Int8 FileName[]);
/*********************************************************************************************************
** 函数名称: FDTIsLie
** 功能描述: 在指定目录查看指定文件（目录）是否存在
**
** 输　入: ClusIndex：目录首簇号
**         FileName：文件（目录）名
** 输　出: RETURN_OK：成功
**        其它参考fat.h中关于返回值的说明
** 全局变量: 无
** 调用模块: GetFDTInfo
********************************************************************************************************/
#endif

/*******************************************************************************************************/

#ifndef IN_DISK

extern void DiskInit(void);
/*********************************************************************************************************
** 函数名称: DiskInit
** 功能描述: 初始化逻辑盘管理模块
**
** 输　入: 无
**
** 输　出: 无
**         
** 全局变量: DiskInfo
** 调用模块: 无
********************************************************************************************************/

extern void AddFileDriver(Uint16 (* DiakCommand)(Uint8 Cammand, void *Parameter), void *RsvdForLow);
/*********************************************************************************************************
** 函数名称: AddFileDriver
** 功能描述: 增加一个底层驱动程序
**
** 输　入: DiakCommand：驱动程序接口函数
**         RsvdForLow:  保留给底层驱动
** 输　出: 无
**         
** 全局变量: DiskInfo
** 调用模块: 无
********************************************************************************************************/

extern void RemoveFileDriver(Uint16 (* DiakCommand)(Uint8 Cammand, void *Parameter));
/*********************************************************************************************************
** 函数名称: RemoveFileDriver
** 功能描述: 删除一个底层驱动程序
**
** 输　入: Drive:逻辑驱动器号
**
** 输　出: 无
**         
** 全局变量: DiskInfo
** 调用模块: 无
********************************************************************************************************/

#endif

/*******************************************************************************************************/

#ifndef IN_RWSEC

extern void CacheInit(void);
/*********************************************************************************************************
** 函数名称: CacheInit
** 功能描述: 初始化磁盘cache
**
** 输　入: 无
**
** 输　出: 无
**         
** 全局变量: DiskCache
** 调用模块: 无
********************************************************************************************************/

extern void AllCacheWriteBack(void);
/*********************************************************************************************************
** 函数名称: AllCacheWriteBack
** 功能描述: 把所有已改变的扇区写回逻辑盘
**
** 输　入: 无
**
** 输　出: 无
**         
** 全局变量: DiskCache
** 调用模块: CacheWriteBack2
********************************************************************************************************/

extern Uint8 *OpenSec(Uint32 Index);
/*********************************************************************************************************
** 函数名称: OpenSec
** 功能描述: 为逻辑盘上的一个扇区打开一个cache并锁定
**
** 输　入: Drive：磁盘号
**        Index：扇区号
** 输　出: 指向指定扇区数据的指针
**         
** 全局变量: DiskCache
** 调用模块: 无
**
********************************************************************************************************/

extern Uint8 ReadSec(Uint32 Index, Uint16 isData);
/*********************************************************************************************************
** 函数名称: ReadSec
** 功能描述: 从逻辑盘读扇区
**
** 输　入: Disk：逻辑盘信息
**        Index：扇区号
** 输　出: TRUE:成功
**         FALSE:失败
** 全局变量: DiskCache
** 调用模块:
********************************************************************************************************/

extern void WriteSec(Uint32 Index, Uint16 isData);
/*********************************************************************************************************
** 函数名称: WriteSec
** 功能描述: 说明指定逻辑盘的指定一个扇区被改写
**
** 输　入: Disk：逻辑盘信息
**        Index：扇区号
**        isData: data or system sector
** 输　出: 无
**         
** 全局变量: DiskCache
** 调用模块: 无
********************************************************************************************************/

extern void FreeCache(Uint32 Index);
/*********************************************************************************************************
** 函数名称: FreeCache
** 功能描述: 释放指定的扇区
**
** 输　入: 无
**
** 输　出: 无
********************************************************************************************************/

extern void FreeDriveCache(void);
/*********************************************************************************************************
** 函数名称: FreeDriveCache
** 功能描述: 释放指定逻辑盘的扇区
**
** 输　入:
**
** 输　出: 无
********************************************************************************************************/

#endif


/*******************************************************************************************************/

#ifndef IN_FAT

Uint32 FATGetNextClus(Uint32 Index);
/*********************************************************************************************************
** 函数名称: FATGetNextClus
** 功能描述: 返回FAT表指定簇的下一个簇号
**
** 输　入: Index：簇号
** 输　出: 下一个簇号
**         
** 全局变量: 无
** 调用模块: 无
********************************************************************************************************/

Uint32 FATAddClus(Uint32 Index);
/*********************************************************************************************************
** 函数名称: FATAddClus
** 功能描述: 为指定簇链增加一个簇
**
** 输　入: Index：簇链中任意一个簇号，如果为0，则为一个空链增加一个簇
** 输　出: 增加的簇号
**         
** 全局变量: 无
** 调用模块: 无
********************************************************************************************************/

void FATDelClusChain(Uint32 Index);
/*********************************************************************************************************
** 函数名称: FATDelClusChain
** 功能描述: 删除指定簇链
**
** 输　入: Index：簇链中首簇号
** 输　出: 无
**         
** 全局变量: 无
** 调用模块: FATGetNextClus
********************************************************************************************************/
#endif

